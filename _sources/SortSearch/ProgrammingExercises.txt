..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Упражнения для программирования
--------------------------------

#. Проведите эксперимент по тестированию различий между последовательным и бинарным поиском на списке случайных целых чисел.

#. Используйте функции бинарного поиска, данные в тексте (итеративную и рекурсивную). Сгенерируйте упорядоченный список случайных целых чисел и сделайте сравнительный анализ для каждой. Какие результаты вы получили? Можете ли вы их объяснить?

#. Реализуйте бинарный поиск, используя рекурсию без оператора среза. Напоминаем, что для этого вам нужно передать в функцию начальный и конечный индексы подсписка. Сгенерируйте упорядоченный список случайных значений и проведите сравнительный анализ.

#. Реализуйте метод ``len`` (``__len__``) для хэш-таблицы реализации АТД Map.

#. Реализуйте метод ``in`` (``__contains__``) для хэш-таблицы реализации АТД Map.

#. Как вы можете удалять элементы из хэш-таблицы, использующей цепочки для разрешения коллизий? А если используется открытая адресация? Какие особые случаи должны обрабатываться? Реализуйте метод ``del`` для класса ``HashTable``.

#. Для хэш-таблицы реализации отображения выбран размер 11. Если таблица полна, его требуется увеличить. Переделайте метод ``put`` таким образом, чтобы таблица автоматически меняла размер, когда загрузочный фактор достигает предопределённого значения (его вы можете определить, основываясь на оценке "загрузка vs производительность").

#. Реализуйте квадратичное сканирование как технику повторного хэширования.

#. Создайте список из 500 целых, используя генератор случайных чисел. Проведите сравнительный анализ, используя любые алгоритмы сортировки из этой главы. Каковы различия в скорости выполнения?

#. Реализуйте сортировку пузырьком, руководствуясь аналогичным заданием.

#. Пузырьковая сортировка может быть изменена, чтобы "пузыриться" в обоих направлениях. Первый проход перемещает "верх" списка, второй - "низ". Этот альтернативный шаблон продолжается, пока не иссякнет необходимость в проходах. Воплотите этот вариант и опишите, в каких обстоятельствах он может использоваться.

#. Реализуйте сортировку выбором, используя аналогичное задание.

#. Проведите сравнительный анализ для сортировки Шелла, используя различные наборы инкрементов на одном и том же списке.

#. Реализуйте функцию ``mergeSort`` без оператора среза.

#. Одним из способов улучшить быструю сортировку является использование сортирки вставками на списках малой длины (назовите её "пределом деления"). Почему это работает? Реализуйте заново быструю сортировку и используйте её для сортировки списка случайных целых чисел. Проанализируйте результат использования различных величин для предела деления.

#. Реализуйте метод "медианы трёх" для выбора опорного значения, как модификацию ``quickSort``. Запустите эксперимент по сравнению двух техник.
