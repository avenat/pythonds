..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Анализ деревьев поиска
~~~~~~~~~~~~~~~~~~~~~~~

Имея полную реализацию двоичного дерева поиска, давайте быстро проанализируем написанные для неё методы. Начнём с метода ``put``. Ограничивающим фактором его производительности является высота двоичного дерева. Напомним определение из раздела о терминологии: высота дерева - это количество ветвей между корнем и наиболее глубоко расположенным листом. Она будет ограничивающим фактором, потому что, когда мы ищем подходящее место для вставки узла, на каждом уровне требуется как минимум одно сравнение.

Но какова вероятная высота двоичного дерева? Ответ на этот вопрос зависит от того, как в него добавлялись ключи. Если это происходило в произвольном порядке, то высота будет примерно :math:`\log_2{n}`, где :math:`n` - количество узлов в дереве. Это происходит от того, что при случайном распределении ключей около половины из них окажется меньше корня, а остальные - больше. Вспомните: двоичное дерево имеет один корень, потом уровень с двумя узлами, потом с четыремя и так далее. Количество узлов на каждом конкретном уровне - :math:`2^d`, где :math:`d` - его глубина. Общее число узлов в идеально сбалансированном двоичном дереве равно :math:`2^{h+1}-1`, где :math:`h` представляет собой высоту дерева.

Идеально сбалансированное дерево имеет одинаковое количество узлов в левом и правом поддеревьях. Для него производительность ``put`` в наихудшем случае будет :math:`O(\log_2{n})`, где :math:`n` - количество узлов в дереве. Отметьте обратное отношение вычислений по сравнению с предыдущим абзацем. Итак, :math:`\log_2{n}` даст нам высоту дерева и максимальное число сравнений, которое потребуется ``put``, чтобы найти подходящее место для вставки нового узла.

К сожалению, остаётся возможность сконструировать дерево поиска с высотой, равной :math:`n`. Это случится, если вставлять ключи в сортированном порядке. Пример такого дерева приведён на :ref:`рисунке 6 <fig_skewedtree_analysis>`. В этом случае производительность метода ``put`` равна :math:`O(n)`.

.. _fig_skewedtree_analysis:

.. figure:: Figures/skewedTree.png
   :align: center

   Рисунок 6: Перекошенное двоичное дерево будет иметь низкую производительность.

После того, как вы разобрались, что производительность метода ``put`` ограничена высотой дерева, возможно, вы сумеете догадатьсяоб ограничениях остальных методов - ``get, in,`` и ``del``. Поскольку ``get`` ищет в дереве ключ, то в наихудшем случае искомое окажется в самом низу. На первый взгляд случай ``del`` кажется более сложным, поскольку здесь требуется искать преемника для проведения операции удаления. Но вспомните: наихудший сценарий его поиска - тоже высота дерева, что означает простое дублирование работы. Это константный фактор, так что он не меняет наихудший случай.
