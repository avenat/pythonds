..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Абстрактный тип данных "стек"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Абстрактный тип данных для стека определяется следующими структурой и
операциями. Как писалось выше, стек организован как упорядоченная коллекция
элементов, добавляемых и удаляемых из конца, называемого "вершина"
(LIFO-упорядоченность). Ниже представлены операции над стеком.

-  ``Stack()`` создаёт новый пустой стек. Параметры не нужны, возвращает пустой стек.

-  ``push(item)`` добавляет новый элемент на вершину стека.
   В качестве параметра выступает элемент; функция ничего не возвращает.

-  ``pop()`` удаляет верхний элемент из стека. Параметры не требуются, функция
   возвращает элемент. Стек изменяется.

-  ``peek()`` возвращает верхний элемент стека, но не удаляет его. Параметры
   не требуются, стек не модифицируется.

-  ``isEmpty()`` проверяет стек на пустоту. Параметры не требуются, возвращает
   булево значение.

-  ``size()`` возвращает количество элементов в стеке. Параметры не требуются,
   тип результата - целое число.

Например, если ``s`` - свежесозданный пустой стек, то в :ref:`Таблице 1 <tbl_stackops>`
показаны результаты проведения над ним последовательности операций. Согласуясь с
сущностью стека, верхний элемент будет самым правым в списке.

.. _tbl_stackops:

.. table:: **Таблица 1: Простые стековые операции**

    ============================ ======================== ============================
       **Операция над стеком**     **Содержание стека**     **Возвращаемое значение**
    ============================ ======================== ============================
                 ``s.isEmpty()``                   ``[]``                     ``True``
                   ``s.push(4)``                  ``[4]``
               ``s.push('dog')``            ``[4,'dog']``
                    ``s.peek()``            ``[4,'dog']``                    ``'dog'``
                ``s.push(True)``       ``[4,'dog',True]``
                    ``s.size()``       ``[4,'dog',True]``                        ``3``
                 ``s.isEmpty()``       ``[4,'dog',True]``                    ``False``
                 ``s.push(8.4)``   ``[4,'dog',True,8.4]``
                     ``s.pop()``       ``[4,'dog',True]``                      ``8.4``
                     ``s.pop()``            ``[4,'dog']``                     ``True``
                    ``s.size()``            ``[4,'dog']``                        ``2``
    ============================ ======================== ============================


