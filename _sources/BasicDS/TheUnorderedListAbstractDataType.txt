..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Абстрактный тип данных "неупорядоченный список"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Структура неупорядоченного списка, описанного выше, представляет из
себя коллекцию элементов, каждый из которых находится на определённой
позиции по отношению к остальным. Некоторые из возможных операций над
неупорядоченными списками представлены ниже.

-  ``List()`` создаёт новый пустой список.
   Не нуждается в параметрах и возвращает пустой список.

-  ``add(item)`` добавляет в список новый элемент.
   Требует значение в качестве аргумента, ничего не возвращает.
   Предполагает, что до этого элемент в списке отсутствовал.

-  ``remove(item)`` удаляет элемент из списка.
   Требует значение элемента и изменяет список.
   Предполагает первоначальное наличие элемента в списке.

-  ``search(item)`` ищет элемент в списке.
   Требует элемент и возвращает булево значение.

-  ``isEmpty()`` проверка списка на пустоту.
   Не нуждается в параметрах, возвращает булево значение.

-  ``size()`` возвращает количество элементов в списке.
   Не нуждается в параметрах, возвращает целое число.

-  ``append(item)`` добавляет новый элемент в конец списка.
   Требует значение в качестве аргумента, ничего не возвращает.
   Предполагает, что до сих пор такой элемент в списке отсутствовал.

-  ``index(item)`` возвращает позицию элемента в списке.
   Требует значение в качестве аргумента, возвращает его индекс.
   Предполагает, что элемент присутствует в списке.

-  ``insert(pos,item)`` вставляет новый элемент в заданную позицию
   ``pos`` списка. Требует элемент, ничего не возвращает.
   Предполагает, что до сих пор такой элемент в списке отсутствовал
   и существующий размер списка позволяет задать индекс ``pos``.

-  ``pop()`` удаляет и возвращает последний элемент списка.
   Не требует аргументов, возвращает элемент.
   Предполагает, что в списке есть хотя бы один элемент.

-  ``pop(pos)`` удаляет и возвращает элемент из позиции ``pos``.
   Требует позицию в качестве аргумента и возвращает элемент.
   Предполагает, что такой элемент присутствует в списке.

