..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Абстрактный тип данных "очередь"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Абстрактный тип данных для очереди определяется следующими структурой и операциями.
Как описывалось выше, очередь структурирована как упорядоченная коллекция элементов,
которые добавляются с одного конца, называемого "хвост", и удаляются с другого,
называемого "голова". Очередь поддерживает свойство упорядочения FIFO. Операции для
очереди представлены ниже.

-  ``Queue()`` создаёт новую пустую очередь. Не нуждается в параметрах, возвращает
   пустую очередь.

-  ``enqueue(item)`` добавляет новый элемент в конец очереди. Требует элемент в
   качестве параметра, ничего не возвращает.

-  ``dequeue()`` удаляет передний элемент из очереди. Не нуждается в параметрах,
   возвращает элемент. Очередь изменяется.

-  ``isEmpty()`` проверяет очередь на пустоту. Не нуждается в параметрах,
   возвращает булево значение.

-  ``size()`` возвращает количество элементов в очереди (целое число).
   Не нуждается в параметрах.

Как пример, если мы предположим, что ``q`` - это очередь, которая создана и
пока пуста, то :ref:`Таблица 1 <tbl_queueoperations>` показывает результаты
последовательности операций над нею. Содержимое очереди показано таким образом,
что голова находится справа. 4 была первым элементом, ожидающим обработки,
поэтому она будет первым элементом, убираемым из очереди.

.. _tbl_queueoperations:

.. table:: **Таблица 1: Пример операций для очереди**

    ============================ ======================== ===============================
              **Оператор**             **Содержимое**         **Возвращаемое значение** 
    ============================ ======================== ===============================
                 ``q.isEmpty()``                   ``[]``                        ``True`` 
                ``q.enqueue(4)``                  ``[4]``                    
            ``q.enqueue('dog')``            ``['dog',4]``                    
             ``q.enqueue(True)``       ``[True,'dog',4]``                    
                    ``q.size()``       ``[True,'dog',4]``                           ``3`` 
                 ``q.isEmpty()``       ``[True,'dog',4]``                       ``False`` 
              ``q.enqueue(8.4)``   ``[8.4,True,'dog',4]``                    
                 ``q.dequeue()``     ``[8.4,True,'dog']``                           ``4`` 
                 ``q.dequeue()``           ``[8.4,True]``                       ``'dog'`` 
                    ``q.size()``           ``[8.4,True]``                           ``2`` 
    ============================ ======================== ===============================


