..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Что такое информатика?
-------------------------

Очень часто сложно дать определение понятию "computer science". Может
быть, причиной этого является неудачное использование в названии слова
"computer". Как вы возможно знаете, информатика - это не только
изучение компьютеров. Хотя они и играют важную вспомогательную роль в
данной дисциплине, но всё равно остаются всего лишь инструментами.

Информатика занимается изучением задач, процессом их решения и
получившимися результатами. Для каждой поставленной задачи
учёный-информатик должен разработать **алгоритм** - пошаговую
инструкцию для получения решения любого её частного случая, который
только может возникнуть. Алгоритм считается законченным, если
следование ему приводит к решению проблемы. Алгоритм и есть это решение.

Информатику можно рассматривать как науку, исследующую алгоритмы.
Однако, нам стоит быть осторожнее, принимая во внимание тот факт, что
некоторые задачи могут и не иметь решения. Хотя доказательство этого
положения выходит за пределы данной книги, сам факт, что не все задачи
можно решить, очень важен для решившего заняться изучением информатики.
Мы сможем полностью сформулировать понятие "информатика" только включив
в него оба типа задач и положив, что эта наука занимается изучением как
решаемых задач, так тех, что решения не имеют.

Так же при описании задач и их решений часто встречается слово
**"вычислимый"**. Мы говорим, что задача вычислима, если существует
алгоритм для её решения. Таким образом, можно сформулировать
альтернативное определение информатики, как науки, занимающейся
изучением вычислимых и не вычислимых задач, существующих и не
существующих алгоритмов. В любом случае, вы легко можете заметить,
что слово "компьютер" здесь нигде не употребляется. Решение
рассматривает независимо от машины.

Информатика, имея отношение к процессу решения различных задач, также
занимается изучением абстракций. Абстракция позволяет нам рассматривать
задачу и её решение, разделяя так называемые логический и физический
ракурсы. Основа этой идеи знакома нам по широко распространённому примеру.

Рассмотрим автомобиль, который, возможно, ежедневно отвозит вас в школу
или на работу. Как водитель (пользователь автомобиля) вы определённым
образом взаимодействуете с машиной, чтобы использовать её по прямому
назначению. Вы садитесь, вставляете ключ зажигания, заводите машину,
переключаете передачи, тормозите, жмёте на газ и крутите руль в процессе
езды. С абстрактной точки зрения мы можем сказать, что вы рассматриваете
автомобиль с логического ракурса. Вы используете набор функций,
предоставленный вам конструкторами автомобиля, с целью перемещения
себя из пункта А в пункт Б. Эти функции так же иногда называют
**интерфейсом**.

С другой стороны, механик, который должен чинить ваш автомобиль, имеет
абсолютно другой взгляд на него. Ему нужно не только знать, как
управлять машиной, но и быть в курсе всех подробностей тех функций,
которые мы воспринимаем как должные. Например, как работают двигатель
и коробка передач, контролируется температура и тому подобное. Этот
подход известен как "физический ракурс" - детали, лежащие "под капотом".

Тоже самое имеет место и при использовании компьютера. Большинство людей
используют компьютер, чтобы писать документы, отправлять и получать
почты, сёрфить в интернете, проигрывать музыку, хранить картинки и
играть в игры, не имея при этом ни малейшего представления о деталях
работы всех этих приложений. Они смотрят на компьютер с логической
(или пользовательской) точки зрения. Учёные-информатики, программисты,
персонал технической поддержки и системные администраторы имеют
совершенно другое виденье компьютера. Они должны знать детали того,
как работает операционная система, настраиваются сетевые протоколы,
пишутся скрипты для выполнения тех или иных функций. Они должны быть
готовы управлять всеми низкоуровневыми деталями, которые для
пользователей подразумеваются сами собой.

Общим в этих двух примерах является то, что пользователю абстракции
(иногда его называют "клиентом") нет необходимости знать детали до тех
пор, пока интерфейс нормально работает. Этот интерфейс - способ,
которым мы как пользователи общаемся с лежащей в глубине сложностью
реализации. Как ещё один пример абстракции можно рассмотреть модуль
```math``` языка Python. Единожды импортировав модуль, мы можем
совершать вычисления вида:

::

    >>> import math
    >>> math.sqrt(16)
    4.0
    >>>

Это пример **процедурной абстракции**. Нам не нужно знать, как будет
вычислен квадратный корень, - достаточно информации о том, какую
функцию нужно вызвать и как её использовать. Если мы осуществили
корректный вызов, то можем смело полагать, что получим корректный же
результат. Мы знаем, что кто-то реализовал нахождение квадратного корня,
но всё что нам по-настоящему необходимо - это знать как его использовать.
Такой подход иногда называют "чёрным ящиком". Мы просто описываем
интерфейс: имя функции, её параметры и результат. Детали же скрыты
внутри (см. :ref:`Рисунок 1 <fig_procabstraction>`).

.. _fig_procabstraction:

.. figure::  Figures/blackbox.png
   :scale: 50 %
   :align: center

   Figure 1: Процедурная Абстракция