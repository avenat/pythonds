..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

Упражнения
---------------------

#. Реализуйте простые методы ``getNum`` и ``getDen``, возвращающие
   числитель и знаменатель дроби.

#. Во многих отношениях было бы лучше, если бы все дроби приводились
   в сокращённом виде с самого начала. Измените конструктор класса
   ``Fraction`` таким образом, чтобы GCD использовался для сокращения
   дробей немедленно. Заметьте - это означает, что функция ``__add__``
   больше не нуждается в сокращениях. Произведите необходимые модификации.

#. Реализуйте оставшиеся простые арифметические операторы (``__sub__``,
   ``__mul__`` и ``__truediv__``).

#. Реализуйте оставшиеся операторы отношений (``__gt__``, ``__ge__``,
   ``__lt__``, ``__le__``, and ``__ne__``)

#. Модифицируйте конструктор класса дробей таким образом, чтобы он поверял,
   являются ли числитель и знаменатель целыми числами. Если хотя бы одно
   из условий не выполняется, то вызовите исключение.

#. В определении дробей мы предположили, что отрицательные дроби имеют
   отрицательный числитель и положительный знаменатель. Использование
   отрицательного знаменателя может повлечь за собой неправильные результаты
   некоторых операторов отношений. Вообще, это ограничение является не таким
   уж необходимым. Модифицируйте конструктор таким образом, чтобы позволить
   пользователю вводить отрицательный знаменатель, а все операторы продолжили
   работать правильным образом.

#. Исследуйте метод ``__radd__``. В чём его отличие от ``__add__``?
   Когда он используется? Реализуйте ``__radd__``.

#. Задание аналогично предыдущему, но на этот раз рассмотрите
   ``__iadd__`` метод.

#. Исследуйте ``__repr__`` метод. Чем он отличается от ``__str__``?
   Когда используется? Реализуйте <code>__repr__``.

#. Исследуйте другие типы существующих вентилей (таких как NAND(НЕ-И),
   NOR(НЕ-ИЛИ) и исключающее XOR(ИЛИ)). Добавьте их в иерархию цепей.
   Сколько дополнительного кода вам понадобилось?

#. Наиболее простая арифметическая цепь называется полусумматор.
   Исследуйте и реализуйте её.

#. Теперь расширьте эту цепь и реализуйте 8-битный полный сумматор.

#. Симуляция цепи, показанная в данной части, работает в обратном
   направлении. Другими словами, выходное значение производится путём
   обратной работы через входные значения, которые в свою очередь запрашивают
   другие выходы. Это продолжается до тех пор, пока не будут найдены внешние
   входные линии. В этот момент у пользователя будут запрошены значения для
   них. Измените реализацию таким образом, чтобы эти действия происходили в
   прямом направлении: схема производила выход после получения значений на входах.

#. Создайте класс, представляющий игровые карты. Потом создайте класс,
   представляющий колоду карт. Используя эти два класса, реализуйте вашу
   любимую карточную игру.

#. Найдите головоломку Судоку в местной газете. Напишите программу для её решения.


